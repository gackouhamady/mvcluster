name: CI/CD Pipeline for mvcluster

on:
  push:
    branches:
      - test           # Tests sur les pushes vers 'test'
    tags:
      - 'v*.*.*'       # Releases (ex : v1.2.3)
  pull_request:
    branches:
      - main           # PR vers la branche principale

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/requirements.txt
          pip install pytest flake8

      - name: Lint code
        run: |
          if [ -d "tests" ]; then
            flake8 mvcluster tests
          else
            flake8 mvcluster
          fi

      - name: Install mvcluster in editable mode
        run: pip install -e .

      - name: Run tests if any
        run: |
          if compgen -G "tests/test_*.py" > /dev/null; then
            pytest tests/
          else
            echo "No tests found."
          fi

  build-and-deploy:
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install build twine

      - name: Build the package
        run: python -m build

      - name: Publish to PyPI
        run: |
          python -m twine upload dist/*
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
