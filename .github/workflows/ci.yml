name: CI/CD Pipeline for mvcluster

on:
  push:
    branches:
      - test  # Déclenchement sur push vers la branche test
  pull_request:
    branches:
      - main  # Déclenchement sur pull request vers la branche principale (main)

jobs:
  # Job pour tester le code
  test:
    runs-on: ubuntu-latest

    steps:
      # Étape 1: Checkout du code
      - name: Checkout code
        uses: actions/checkout@v2

      # Étape 2: Installer Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'  # Choisis la version de Python appropriée

      # Étape 3: Installer les dépendances
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      # Étape 4: Installer le package mvcluster en mode éditable
      - name: Install mvcluster in editable mode
        run: |
          pip install -e .  # Installer le package mvcluster dans l'environnement d'exécution

      # Étape 5: Exécuter les tests unitaires (si tu en as)
      - name: Run tests
        run: |
          pytest  # Remplace par tes tests

  # Job pour build et publier sur PyPI après le merge
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test  # Ce job s'exécute après le job de test

    steps:
      # Étape 1: Checkout du code
      - name: Checkout code
        uses: actions/checkout@v2

      # Étape 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      # Étape 3: Installer les dépendances
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e  # Installer le package en mode éditable
          python -m pip install build twine

      # Étape 4: Ajouter le répertoire racine au PYTHONPATH
      - name: Add project root to PYTHONPATH
        run: echo "PYTHONPATH=$PYTHONPATH:$(pwd)" >> $GITHUB_ENV

      # Étape 5: Construire les distributions
      - name: Build the package
        run: |
          python -m build

      # Étape 6: Publier sur PyPI via Twine (seulement sur la branche principale)
      - name: Publish to PyPI
        if: github.ref == 'refs/heads/main'  # Exécution uniquement sur la branche principale
        run: |
          python -m twine upload dist/*  # Télécharge les distributions sur PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}  # API username de PyPI
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}  # API token de PyPI
